(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('upload-csv', ['exports', '@angular/core'], factory) :
    (factory((global['upload-csv'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UploadCsvService = (function () {
        function UploadCsvService() {
        }
        UploadCsvService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        UploadCsvService.ctorParameters = function () { return []; };
        /** @nocollapse */ UploadCsvService.ngInjectableDef = i0.defineInjectable({ factory: function UploadCsvService_Factory() { return new UploadCsvService(); }, token: UploadCsvService, providedIn: "root" });
        return UploadCsvService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UploadCsvComponent = (function () {
        function UploadCsvComponent() {
        }
        /**
         * @return {?}
         */
        UploadCsvComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        UploadCsvComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-upload-csv',
                        template: "\n    <p>\n      upload-csv works!\n    </p>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        UploadCsvComponent.ctorParameters = function () { return []; };
        return UploadCsvComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UploadCsvModule = (function () {
        function UploadCsvModule() {
        }
        UploadCsvModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [UploadCsvComponent],
                        exports: [UploadCsvComponent]
                    },] },
        ];
        return UploadCsvModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.UploadCsvService = UploadCsvService;
    exports.UploadCsvComponent = UploadCsvComponent;
    exports.UploadCsvModule = UploadCsvModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWNzdi51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL3VwbG9hZC1jc3YvbGliL3VwbG9hZC1jc3Yuc2VydmljZS50cyIsIm5nOi8vdXBsb2FkLWNzdi9saWIvdXBsb2FkLWNzdi5jb21wb25lbnQudHMiLCJuZzovL3VwbG9hZC1jc3YvbGliL3VwbG9hZC1jc3YubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVXBsb2FkQ3N2U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi11cGxvYWQtY3N2JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cD5cbiAgICAgIHVwbG9hZC1jc3Ygd29ya3MhXG4gICAgPC9wPlxuICBgLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFVwbG9hZENzdkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXBsb2FkQ3N2Q29tcG9uZW50IH0gZnJvbSAnLi91cGxvYWQtY3N2LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbVXBsb2FkQ3N2Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW1VwbG9hZENzdkNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgVXBsb2FkQ3N2TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkluamVjdGFibGUiLCJDb21wb25lbnQiLCJOZ01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBT0U7U0FBaUI7O29CQUxsQkEsYUFBVSxTQUFDO3dCQUNWLFVBQVUsRUFBRSxNQUFNO3FCQUNuQjs7Ozs7K0JBSkQ7Ozs7Ozs7QUNBQTtRQWFFO1NBQWlCOzs7O1FBRWpCLHFDQUFROzs7WUFBUjthQUNDOztvQkFkRkMsWUFBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7d0JBQzFCLFFBQVEsRUFBRSxrREFJVDt3QkFDRCxNQUFNLEVBQUUsRUFBRTtxQkFDWDs7OztpQ0FWRDs7Ozs7OztBQ0FBOzs7O29CQUdDQyxXQUFRLFNBQUM7d0JBQ1IsT0FBTyxFQUFFLEVBQ1I7d0JBQ0QsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7d0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO3FCQUM5Qjs7OEJBUkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=